class Solution
{
	public:
	void topological(int node,vector<vector<int>>& adj,vector<bool>&visited, stack<int>&s){
	    visited[node]=1;
	    for(int j=0;j<adj[node].size();j++){
	        if(!visited[adj[node][j]])
	        topological(adj[node][j],adj,visited,s);
	    }
	    s.push(node);
	}
	void dfs(int node, vector<vector<int>>&adj,vector<bool>&visited){
	    visited[node]=1;
	    for(int j=0;j<adj[node].size();j++){
	        if(!visited[adj[node][j]])
	        dfs(adj[node][j],adj,visited);
	    }
	}
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        //code here
        stack<int>s;
        vector<bool>visited(V,0);
        for(int i=0;i<V;i++){
            if(!visited[i])
            topological(i,adj,visited,s);
        }
        vector<vector<int>>adj2(V);
        for(int i=0;i<V;i++)
        for(int j=0;j<adj[i].size();j++){
            int u=i;
            int v=adj[i][j];
            adj2[v].push_back(u);
        }
        for(int i=0;i<V;i++)
        visited[i]=0;
        int ssc=0;
        while(!s.empty()){
            int node=s.top();
            s.pop();
            if(!visited[node]){
                ssc++;
                dfs(node,adj2,visited);
            }
        }
        return ssc;
    }
};
